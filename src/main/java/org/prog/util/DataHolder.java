package org.prog.pages.util;

import java.util.HashMap;

//гарантує, що певний клас буде виключно незмінним, єдиним у своєму роді
public class DataHolder {
//СінглТон?
    private static final DataHolder instance = new DataHolder();//унікальний, ніхто не може створити об'єкт цього
    //класу тільки в середині цього класу
    private final HashMap<String, Object> data;

    private DataHolder() {
        data = new HashMap<>();
    }

    public static DataHolder getInstance() {
        return instance;
    }

    public void put(String key, Object value) {
        data.put(key, value);
    }

    public Object get(String key) {
        return data.get(key);
    }
}
/*
DataHolder - це інтерфейс в Java, який використовується для зберігання даних в об'єкті,
який можна передавати між функціями. Це простий і зручний спосіб зберігання і передачі даних в Java.
Інтерфейс DataHolder не має жодного методу, він просто оголошує об'єкт, який можна
використовувати для зберігання даних. Зазвичай, для реалізації DataHolder використовують класи, які реалізують цей інтерфейс.
Основними прикладами використання DataHolder в Java є:
Зберігання конфігураційних параметрів - наприклад, параметри підключення до бази даних, порти,
URL-адреси і т.д.
Зберігання стану застосунку - наприклад, даних форми, які вводяться користувачем, або
стану виконання функцій, які можуть вимагати багато часу для обробки.
Передача параметрів між методами - наприклад, виклик методу з параметрами, які потрібно
зберегти для використання в іншому методі.
Одним з прикладів класу, який реалізує інтерфейс DataHolder, є клас Bundle в Android,
який використовується для зберігання даних, передачі їх між компонентами і для локалізації.
 */